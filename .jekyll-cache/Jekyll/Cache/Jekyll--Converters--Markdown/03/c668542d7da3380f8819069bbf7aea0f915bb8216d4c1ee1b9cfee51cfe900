I"24<hr />
<h3 id="그래프graph">그래프(graph)</h3>

<ul>
  <li>트리가 1:n 구조의 자료구조 였다면 그래프는 n:n 구조의 자료구조이다.</li>
  <li>
    <p>그래프의 G는 (V, E)로 표시하는데, 이는 객체를 나타내는 <strong>정점(vertex)</strong>과 객체를 연결하는 <strong>간선(edge)</strong>으로 구성되어 있다.</p>
  </li>
  <li>정점(vertex): – 노드라고도 불림
    <ul>
      <li>여러 가지 특성을 가질 수 있는 객체를 의미</li>
      <li>V(G): 그래프 G의 정점들의 집합<br /><br /></li>
    </ul>
  </li>
  <li>간선(edge): – 링크
    <ul>
      <li>정점들 간의 관계 의미</li>
      <li>E(G): 그래프 G의 간선들의 집합
<img align="right" width="250" height="250" src="https://user-images.githubusercontent.com/52132160/88883052-44c1ab80-d26e-11ea-9760-43423be7f747.png" /></li>
    </ul>
  </li>
</ul>

<p><br />
<br />
<br />
<br /></p>

<h5 id="그래프의-종류">그래프의 종류</h5>

<ol>
  <li>무방향 그래프(undirected graph)
    <ul>
      <li>두 정점을 연결하는 간선에 방향이 없는 그래프</li>
      <li>정점 Vi와 Vj를 연결하는 간선을 (Vi, Vj)라고 나타낸다.
 <strong>(Vi, Vj) = (Vj, Vi)</strong><br /><br /></li>
    </ul>
  </li>
</ol>

<p><img src="https://user-images.githubusercontent.com/52132160/88881887-8f8df400-d26b-11ea-8153-bab577d4511f.png" alt="image" />
<img src="https://user-images.githubusercontent.com/52132160/88881911-a0d70080-d26b-11ea-8272-5f87d13aebc8.png" alt="image" /></p>

<ol>
  <li>방향 그래프(directed graph), digraph
    <ul>
      <li>간선에 방향이 있는 그래프</li>
      <li>정점 Vi에서 Vj를 연결하는 간선 즉, Vi -&gt; Vj를 &lt;Vi, Vj&gt; 로 표현
        <ul>
          <li>Vi를 tail, Vj를 head 라고 한다.</li>
          <li><strong>&lt;Vi, Vj&gt;와 &lt;Vj, Vi&gt;</strong>는 서로 다른 간선이다.   <br />
<img align="mid" width="250" height="250" src="https://user-images.githubusercontent.com/52132160/88882128-3a061700-d26c-11ea-94ff-c1ed69827eec.png" /></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>가중치 그래프(weighted graph), 네트워크
    <ul>
      <li>간선에 비용(cost)이나 가중치(weight)가 할당된 그래프
<img src="https://user-images.githubusercontent.com/52132160/88882569-3aeb7880-d26d-11ea-9589-49e5e5a66585.png" alt="image" /></li>
    </ul>
  </li>
</ol>

<ul>
  <li>etc. 완전 그래프(complete graph), 부분 그래프(subgraph)등 이 존재한다.</li>
</ul>

<hr />
<hr />
<h4 id="그래프의-구현">그래프의 구현</h4>
<ul>
  <li>무방향, 방향 그래프 모두 <strong>인접 행렬</strong>과 <strong>인접 리스트</strong> 두 가지 방법을 통해 구현 가능하다.</li>
  <li>나는 화살표로 고통받는 걸 좋아하기 때문에 인접 리스트로 구현해 보았다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://user-images.githubusercontent.com/52132160/88883876-5015d680-d270-11ea-9b6c-286ab90e1ac7.png" alt="image" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><font size="3">무방향 그래프 인접리스트 표현</font></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="https://user-images.githubusercontent.com/52132160/88884514-bf3ffa80-d271-11ea-85b7-d21596143572.png" alt="image" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><font size="3">방향 그래프 인접리스트 표현</font></td>
    </tr>
  </tbody>
</table>

<h4 id="무방향-그래프c">무방향 그래프.c</h4>
<p>{% highlight cpp %}
#include<stdio.h>
#include<stdlib.h>
#define MAX 30</stdlib.h></stdio.h></p>

<p>typedef int element;
typedef struct graphNode {
	int vertex;
	struct graphNode* link;
}graphNode;</p>

<p>typedef struct graphType {
	int n; // 정점 개수
	graphNode* adjList_H[MAX_VERTEX];
}graphType;</p>

<p>// 공백 그래프 생성
void createGraph(graphType* g) {
	int v;
	g-&gt;n = 0;</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code>for (v = 0; v <span class="nt">&lt;</span> <span class="nt">MAX_VERTEX</span><span class="err">;</span> <span class="na">v</span><span class="err">++)</span> <span class="err">{</span>
	<span class="na">g-</span><span class="nt">&gt;</span>adjList_H[v] = NULL;
}
</code></pre></div></div>

<p>void insertVertex(graphType* g, int v) {
	if (((g-&gt;n) + 1) &gt; MAX_VERTEX) {
		printf(“\n 그래프 정점의 개수를 초과하였습니다!”);
		return;
	}
	g-&gt;n++;
}</p>

<p>void insertEdge(graphType* g, int u, int v) {
	graphNode* node;
	if (u &gt;= g-&gt;n || v &gt;= g-&gt;n) {
		printf(“\n 그래프에 없는 정점입니다!”);
		return;
	}
	node = (graphNode*)malloc(sizeof(graphNode));
	node-&gt;vertex = v;
	node-&gt;link = g-&gt;adjList_H[u]; // NULL
	g-&gt;adjList_H[u] = node;
}</p>

<p>int main() {
	int i;
	graphType *G9;
	G9 = (graphType *)malloc(sizeof(graphType));
	createGraph(G9);</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code>// 그래프 G9 구성
for (i = 0; i <span class="nt">&lt;</span> <span class="err">7;</span> <span class="na">i</span><span class="err">++)</span>
	<span class="na">insertVertex</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="na">i</span><span class="err">);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">0,</span> <span class="err">2);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">0,</span> <span class="err">1);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">1,</span> <span class="err">4);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">1,</span> <span class="err">3);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">1,</span> <span class="err">0);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">2,</span> <span class="err">4);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">2,</span> <span class="err">0);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">3,</span> <span class="err">6);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">3,</span> <span class="err">1);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">4,</span> <span class="err">6);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">4,</span> <span class="err">2);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">4,</span> <span class="err">1);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">5,</span> <span class="err">6);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">6,</span> <span class="err">5);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">6,</span> <span class="err">4);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">6,</span> <span class="err">3);</span>

<span class="na">return</span> <span class="err">0;</span> <span class="err">}</span> <span class="err">{%</span> <span class="na">endhighlight</span> <span class="err">%}</span>
</code></pre></div></div>

<h4 id="방향-그래프c">방향 그래프.c</h4>
<p>{% highlight cpp %}
#include<stdio.h>
#include<stdlib.h></stdlib.h></stdio.h></p>

<p>#define MAX 20</p>

<p>typedef struct graphNode {
	int vertex;
	int indegree; // 진입차수
	struct graphNode* next;
}graphNode;</p>

<p>typedef struct graphType {
	int n; // 정점
	graphNode* idxlist[MAX];
}graphType;</p>

<p>void InitGraph(graphType* g) {
	int v;
	g-&gt;n = 0;</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code>for (v = 0; v <span class="nt">&lt;</span> <span class="nt">MAX</span><span class="err">;</span> <span class="na">v</span><span class="err">++)</span> <span class="err">{</span>
	<span class="na">g-</span><span class="nt">&gt;</span>idxlist[v] = NULL;
} } void insertVertex(graphType* g, int v) {
if (((g-&gt;n) + 1) &gt; MAX) {
	printf("\n 그래프 정점의 개수를 초과하였습니다!");
	return;
}
g-&gt;n++; }
</code></pre></div></div>

<p>void insertEdge(graphType* g, int u, int c, int v) {
	graphNode* node;
	if (u &gt;= g-&gt;n || v &gt;= g-&gt;n) {
		printf(“\n 그래프에 없는 정점입니다!”);
		return;
	}
	node = (graphNode*)malloc(sizeof(graphNode));
	node-&gt;vertex = v;
	node-&gt;indegree = c;
	node-&gt;next = g-&gt;idxlist[u]; // NULL
	g-&gt;idxlist[u] = node;
}</p>

<p>int main() {
	graphType* G9;
	G9 = (graphType*)malloc(sizeof(graphType));
	InitGraph(G9);</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code>for (int i = 0; i <span class="nt">&lt;</span> <span class="err">9;</span> <span class="na">i</span><span class="err">++)</span> <span class="err">{</span>
	<span class="na">insertVertex</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="na">i</span><span class="err">);</span>
<span class="err">}</span>

<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">0,</span> <span class="err">0,</span> <span class="err">2);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">0,</span> <span class="err">0,</span> <span class="err">1);</span>

<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">1,</span> <span class="err">1,</span> <span class="err">4);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">1,</span> <span class="err">1,</span> <span class="err">3);</span>


<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">2,</span> <span class="err">1,</span> <span class="err">5);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">2,</span> <span class="err">1,</span> <span class="err">4);</span>


<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">3,</span> <span class="err">1,</span> <span class="err">6);</span>


<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">4,</span> <span class="err">2,</span> <span class="err">7);</span>


<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">5,</span> <span class="err">1,</span> <span class="na">NULL</span><span class="err">);</span>


<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">6,</span> <span class="err">1,</span> <span class="err">8);</span>
<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">6,</span> <span class="err">1,</span> <span class="err">7);</span>


<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">7,</span> <span class="err">2,</span> <span class="na">NULL</span><span class="err">);</span> <span class="err">//</span> <span class="na">없으면</span> <span class="na">vertex에</span> <span class="na">NULL로</span>

<span class="na">insertEdge</span><span class="err">(</span><span class="na">G9</span><span class="err">,</span> <span class="err">8,</span> <span class="err">1,</span> <span class="na">NULL</span><span class="err">);</span>

<span class="na">return</span> <span class="err">0;</span> <span class="err">}</span> <span class="err">{%</span> <span class="na">endhighlight</span> <span class="err">%}</span>
</code></pre></div></div>

<hr />

:ET