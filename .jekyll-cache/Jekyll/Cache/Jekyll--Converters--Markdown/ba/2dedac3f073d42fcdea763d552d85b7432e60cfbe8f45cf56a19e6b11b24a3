I"G	<hr />

<h3 id="우선순위-큐priority-queue">우선순위 큐(Priority Queue)</h3>
<p>기존의 선입선출(FIFO) 방식인 큐(queue)와는 달리 우선순위가 높은 데이터부터 나오는 구조.
이 우선순위는 사용자가 정한다.</p>

<h6 id="구현-방법">구현 방법</h6>
<ol>
  <li>배열(array)을 이용한 구현</li>
  <li>연결 리스트(linked list)를 이용한 구현</li>
  <li>힙(heap)을 이용한 구현</li>
</ol>

<p>배열과 연결 리스트를 이용하면 손쉽게 우선순위 큐를 구현할 수 있지만 각각 명확한 단점이 존재하는데,</p>
<ul>
  <li>
    <p><strong>배열</strong>은 기본적으로 데이터의 삽입 및 삭제 시 기존에 존재하던 데이터를 밀어내거나 당겨와야 한다. 즉 데이터가 많아지면 그 단점은 더욱 두드러지게 된다.</p>
  </li>
  <li>
    <p><strong>연결 리스트</strong>는 모든 노드에 접근해가며 비교 연산을 해야 한다는 점에서 역시나 데이터가 많아지면 단점을 보이게 된다.</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>표현 방법</th>
      <th>삽입</th>
      <th>삭제</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>순서없는 배열</td>
      <td>O(1)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>순서없는 연결리스트</td>
      <td>O(1)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>정렬된 배열</td>
      <td>O(n)</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>정렬된 연결 리스트</td>
      <td>O(n)</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>힙(heap)</td>
      <td>O(logn)</td>
      <td>O(logn)</td>
    </tr>
  </tbody>
</table>

<p>위 표처럼 <strong>힙(heap)</strong>을 사용하여 구현하는 것이 가장 효율적이다.</p>

<h4 id="힙heap">힙(heap)</h4>

<p>힙(heap)이란 완전 이진트리의 한 종류로 우선순위 큐를 위해 만들어진 자료구조이다.</p>

<p>특징:</p>
<ol>
  <li>여러 개의 값들 중에서 최대값이나 최솟값을 빠르게 찾아내는 것이 가능하다(최대 힙, 최소 힙)</li>
  <li>부모 노드과 자식 노드과의 상-하 관계가 존재하지만 자식 노드(좌-우)간에 관계는 없다(반정렬 상태)</li>
  <li>이진 탐색 트리와는 다르게 <strong>중복 값</strong>도 허용.</li>
</ol>

<hr />

:ET